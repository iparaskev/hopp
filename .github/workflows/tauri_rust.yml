name: Tauri rust CI

on:
  workflow_run:
    workflows: ["pre-commit"]
    types:
      - completed
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-files:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      tauri-changed: ${{ steps.filter.outputs.tauri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Check for changes in tauri/src-tauri
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.event.workflow_run.base_sha }}
          filters: |
            tauri:
              - 'tauri/src-tauri/**'

  fmt:
    runs-on: ubuntu-latest
    needs: check-files
    if: ${{ needs.check-files.outputs.tauri-changed == 'true' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Run rustfmt
        working-directory: tauri/src-tauri
        run: cargo fmt --all -- --check

  lint:
    name: Lint (clippy)
    runs-on: ${{ matrix.os }}
    needs: check-files
    if: ${{ needs.check-files.outputs.tauri-changed == 'true' || github.event_name == 'workflow_dispatch' }}

    env:
      SENTRY_DSN_RUST: ""
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Install Rust MSRV
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: '1.87.0' 
          components: clippy

      - name: Cache Cargo builds
        uses: Swatinem/rust-cache@v2

      - name: Run clippy
        working-directory: tauri/src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: check-files
    if: ${{ needs.check-files.outputs.tauri-changed == 'true' || github.event_name == 'workflow_dispatch' }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
        
    env:
      SENTRY_DSN_RUST: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Cache Cargo builds
        uses: Swatinem/rust-cache@v2

      - name: Set XCode
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          sudo xcode-select -s "/Applications/Xcode_16.2.app"

      - name: Create dist
        working-directory: tauri
        shell: bash
        run: |
          mkdir -p dist

      - name: Create hopp_core release
        working-directory: core
        shell: bash
        run: |
          mkdir -p target/release
          EXT=""
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXT=".exe"
          fi
          touch target/release/hopp_core-${{ matrix.target }}$EXT

      - name: Create hopp_core debug
        working-directory: core
        shell: bash
        run: |
          mkdir -p target/debug
          EXT=""
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXT=".exe"
          fi
          touch target/debug/hopp_core-${{ matrix.target }}$EXT

      - name: Build
        working-directory: tauri/src-tauri
        run: cargo build --release --target ${{ matrix.target }}
